import { z } from 'zod';


// Schema principal da magia
export const MagicSchema = z.object({
  id: z
    .string()
    .uuid()
    .optional()
    .describe("ID √∫nico gerado automaticamente"),
  name: z
    .string()
    .min(3)
    .max(100)
    .describe("Nome da magia"),
  description: z
    .string()
    .max(1000)
    .describe("Descri√ß√£o geral da magia"),
  class: z
    .string()
    .max(50)
    .describe("Classe principal associada √† magia"),
  subclass: z
    .string()
    .max(50)
    .describe("Subclasse/especializa√ß√£o da magia"),
  levels: z
    .array(LevelSchema)
    .min(1)
    .describe("N√≠veis dispon√≠veis da magia"),
  uniqueMagic: z
    .boolean()
    .describe("Indica se a magia √© √∫nica (exclusiva para um usu√°rio)"),
  comunMagic: z
    .boolean()
    .describe("Indica se a magia √© comum (dispon√≠vel para todos)"),
  user: z
    .string()
    .uuid()
    .optional()
    .describe("ID do usu√°rio dono (apenas para magias √∫nicas)")
}).superRefine((data, ctx) => {
  // Valida√ß√£o 1: Magia n√£o pode ser √∫nica e comum ao mesmo tempo
  if (data.uniqueMagic && data.comunMagic) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "‚ö†Ô∏è A magia n√£o pode ser √∫nica e comum simultaneamente",
      path: ["uniqueMagic"]
    });
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "‚ö†Ô∏è A magia n√£o pode ser √∫nica e comum simultaneamente",
      path: ["comunMagic"]
    });
  }

  // Valida√ß√£o 2: User obrigat√≥rio para magias √∫nicas
  if (data.uniqueMagic && !data.user) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "üîë ID do usu√°rio √© obrigat√≥rio para magias √∫nicas",
      path: ["user"]
    });
  }
});