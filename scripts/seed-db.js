import { config } from "dotenv";
config({ path: ".env.local" });
import { MongoClient, ObjectId } from "mongodb";
import { ClassSchema } from "../src/lib/schemas/classSchema.js";
import { SubclassSchema } from "../src/lib/schemas/subclassSchema.js";
import { LevelSchema } from "../src/lib/schemas/levelSchema.js";
import { RaceSchema } from "../src/lib/schemas/raceSchema.js";
import { SpellSchema } from "../src/lib/schemas/spellSchema.js";

const MONGODB_URI = process.env.MONGODB_URI;
const DB_NAME = process.env.MONGODB_DBNAME;

// Configura√ß√£o das collections
const COLLECTIONS = {
  CLASSES: "classes",
  SUBCLASSES: "subclasses",
  LEVELS: "levels",
  RACES: "races",
  SPELLS: "spells",
};

// Fun√ß√£o de valida√ß√£o
const validateWithSchema = (data, schema) => {
  const result = schema.safeParse(data);
  if (!result.success) {
    console.error("Erro de valida√ß√£o:", {
      errors: result.error.issues,
      data: JSON.parse(JSON.stringify(data)),
    });
    throw new Error("Dados inv√°lidos");
  }
  return data;
};

// Fun√ß√£o para limpar collections
const cleanDatabase = async (db) => {
  console.log("üßº Iniciando limpeza do banco...");
  await Promise.all(
    Object.values(COLLECTIONS).map(async (col) => {
      await db.collection(col).deleteMany({});
      console.log(`üóëÔ∏è  ${col} limpa`);
    })
  );
};

// Dados para seed
const seedData = {
  [COLLECTIONS.CLASSES]: [
    {
      name: "Mago",
      description: "Usu√°rio de magia arcana",
      advantages: ["Dano m√°gico elevado", "Versatilidade"],
      disadvantages: ["Defesa baixa", "Depend√™ncia de mana"],
    },
    {
      name: "Guerreiro",
      description: "Especialista em combate f√≠sico",
      advantages: ["Alta defesa", "Dano consistente"],
      disadvantages: ["Alcance curto", "Depend√™ncia de equipamento"],
    },
  ],

  [COLLECTIONS.SUBCLASSES]: [
    {
      name: "Mago do Caos",
      description: "Manipulador de energias inst√°veis",
      advantages: ["Dano explosivo", "Efeitos aleat√≥rios"],
      disadvantages: ["Risco de auto-dano", "Dificuldade de controle"],
      classId: null, // Ser√° preenchido dinamicamente
    },
    {
      name: "Cavaleiro da Luz",
      description: "Defensor da justi√ßa e da ordem",
      advantages: ["Prote√ß√£o divina", "Resist√™ncia aumentada"],
      disadvantages: ["Restri√ß√µes morais", "Depend√™ncia de f√©"],
      classId: null, // Ser√° preenchido dinamicamente
    },
  ],

  [COLLECTIONS.SPELLS]: [
    {
      name: "Bola de Fogo",
      description: "Conjura uma esfera de fogo explosiva",
      unique: false,
      levelSpell: [
        { level: 1, ptUso: 3, description: "3m de raio, 2d6 de dano" },
        { level: 3, ptUso: 5, description: "5m de raio, 4d6 de dano" },
      ],
      classId: null, // Ser√° preenchido dinamicamente
      subclassId: null, // Ser√° preenchido dinamicamente
    },
    {
      name: "Cura Divina",
      description: "Restaura a sa√∫de usando energia divina",
      unique: false,
      levelSpell: [
        { level: 1, ptUso: 2, description: "Cura 1d8 pontos de vida" },
        { level: 2, ptUso: 4, description: "Cura 2d8 pontos de vida" },
      ],
      classId: null, // Ser√° preenchido dinamicamente
      subclassId: null, // Ser√° preenchido dinamicamente
    },
  ],

  [COLLECTIONS.LEVELS]: [
    { name: "N√≠vel 1", attributePoints: 20 },
    { name: "N√≠vel 2", attributePoints: 24 },
  ],

  [COLLECTIONS.RACES]: [
    {
      name: "Humano",
      description: "Ra√ßa vers√°til e adapt√°vel",
      advantages: ["B√¥nus em habilidades sociais", "Versatilidade"],
      disadvantages: ["Sem b√¥nus espec√≠ficos", "Progress√£o linear"],
    },
    {
      name: "Elfo",
      description: "Ra√ßa m√°gica e longeva",
      advantages: ["Afina√ß√£o m√°gica", "Sentidos agu√ßados"],
      disadvantages: ["Fragilidade f√≠sica", "Vulnerabilidade ao ferro"],
    },
  ],
};

// Fun√ß√£o principal do seed
async function runSeed() {
  const client = new MongoClient(MONGODB_URI);

  try {
    await client.connect();
    const db = client.db(DB_NAME);

    // 1. Limpar o banco
    await cleanDatabase(db);

    // 2. Inserir classes
    console.log("\nüå± Inserindo classes...");
    const classes = await processCollection(
      db,
      COLLECTIONS.CLASSES,
      ClassSchema,
      seedData[COLLECTIONS.CLASSES]
    );

    // 3. Inserir subclasses (vinculadas √†s classes)
    console.log("\nüå± Inserindo subclasses...");
    const subclasses = await processCollection(
      db,
      COLLECTIONS.SUBCLASSES,
      SubclassSchema,
      seedData[COLLECTIONS.SUBCLASSES].map((sub, index) => ({
        ...sub,
        classId: classes[index], // Vincula √† classe correspondente
      }))
    );

    // 4. Inserir magias (vinculadas a classes ou subclasses)
    console.log("\nüå± Inserindo magias...");
    const spells = await processCollection(
      db,
      COLLECTIONS.SPELLS,
      SpellSchema,
      seedData[COLLECTIONS.SPELLS].map((spell, index) => ({
        ...spell,
        classId: index === 0 ? classes[0] : null, // Bola de Fogo -> Mago
        subclassId: index === 1 ? subclasses[1] : null, // Cura Divina -> Cavaleiro da Luz
      }))
    );

    // 5. Inserir n√≠veis e ra√ßas
    console.log("\nüå± Inserindo n√≠veis e ra√ßas...");
    const [levels, races] = await Promise.all([
      processCollection(
        db,
        COLLECTIONS.LEVELS,
        LevelSchema,
        seedData[COLLECTIONS.LEVELS]
      ),
      processCollection(
        db,
        COLLECTIONS.RACES,
        RaceSchema,
        seedData[COLLECTIONS.RACES]
      ),
    ]);

    // 6. Relat√≥rio final
    console.log("\n‚úÖ Seed conclu√≠do com sucesso!");
    console.table({
      Classes: classes.length,
      Subclasses: subclasses.length,
      Magias: spells.length,
      N√≠veis: levels.length,
      Ra√ßas: races.length,
    });
  } catch (error) {
    console.error("\n‚ùå Falha no seed:", error.message);
  } finally {
    await client.close();
  }
}

// Fun√ß√£o gen√©rica para processar collections
async function processCollection(db, collectionName, schema, rawData) {
  const processedData = rawData.map((item) => ({
    ...item,
    createdAt: new Date(),
    updatedAt: new Date(),
  }));

  const validatedData = processedData.map((data) =>
    validateWithSchema(data, schema)
  );
  const result = await db.collection(collectionName).insertMany(validatedData);

  console.log(`‚úîÔ∏è ${collectionName}: ${validatedData.length} inseridos`);
  return Object.values(result.insertedIds); // Retorna os IDs gerados
}

// Executar o seed
runSeed();
